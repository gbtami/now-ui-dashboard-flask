# -*- encoding: utf-8 -*-
"""
Flask Web App - Generated by www.AppSeed.us
AppSeed - developed by RoSoft | www.RoSoftware.ro
Licence: MIT
"""

# all the imports necessary
from flask       import url_for, redirect, render_template, flash, g, session, jsonify, request, send_from_directory
from flask_login import login_user, logout_user, current_user, login_required
from app         import app, lm, db, bc
from sqlalchemy  import desc
from flask_mail  import Message
from models      import User
from cli         import user_exists

from forms import LoginForm, RegisterForm
import os
import re

import shutil

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

# provide login manager with load_user callback
@lm.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/', defaults={'path': None})
@app.route('/<path>')
def index(path):
    
    content = None 

    if path:
        content = render_template( '/' + path + '.html')
    else:
        content = render_template( '/dashboard.html' )

    return render_template( '/base.html',
                            content = content,
                            path    = path  ) 

# Handle register
@app.route('/register', methods=['GET', 'POST'])
def register():

    # declare the form here
    form = RegisterForm(request.form)

    # validate_on_submit() checks if both http method is POST and the form is valid 
    # on submit
    if form.validate_on_submit():

        # get form data and assign it to variables
        username      = request.form.get('username'     , '', type=str)
        email         = request.form.get('email'        , '', type=str)
        password      = request.form.get('password'     , '', type=str)
        password_conf = request.form.get('password_conf', '', type=str)

        #name     = request.form.get('name'     ,   '', type=str) #not used

        if user_exists(email, username):
            return "Username or email already registerred. Please try again."

        # regex to check for e-mail syntax
        if not re.match("(^.+@{1}.+\.{1}.+)", str(email)):
            return "Invalid e-mail. Please try again."

        # check if passwords match
        if not password == password_conf:
            return "Passwords do no match. Please try again."

        # hash the password here (bcrypt has salting included)
        pw_hash = bc.generate_password_hash(password)

        # if form is valid and all verification is complete
        # create User object and give the parameters in order
        user = User(username, pw_hash, email)

        # add User object to database
        db.session.add( user ) 

        # commit change 
        db.session.commit ( ) 

        return 'Registration ok, you can login ... '  

    return render_template( 'auth/base.html',
                            content = render_template('auth/register.html', form=form) )     

# Handle login
@app.route('/login', methods=['GET', 'POST'])
def login():
    
    # define login form here
    form = LoginForm(request.form)

    # check if both http method is POST and form is valid on submit
    if form.validate_on_submit():

        # assign form data to variables
        username = request.form.get('username', '', type=str)
        password = request.form.get('password', '', type=str) 

        # filter User out of database through username
        user = User.query.filter_by(user=username).first()

        if user == None:
            return "Username does not exist. Please try again"

        elif bc.check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('index'))
        else:
            return "Wrong password. Please try again."
    
    #else:
    #    return "form not ok."

    return render_template( 'auth/base.html',
                            content = render_template('auth/login.html', form=form) )     

# map logout to logout
# this function has 2 decorators
# the second is imported from flask_login (you have to be logged in in order to log out)
@app.route('/logout', methods=['GET'])
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

# ------------------------------------------------------

# error handling
# most common error codes have been added for now
# TO DO:
# they could use some styling so they don't look so ugly

@app.errorhandler(401)
def e401(e):
    return "It seems like you are not allowed to access this link."

@app.errorhandler(404)
def e404(e):
    return "The URL you were looking for does not seem to exist.<br><br>If you have typed the link manually, make sure you've spelled the link right."

@app.errorhandler(500)
def e500(e):
    return "Internal error. Contact the manager about this."

@app.errorhandler(403)
def e403(e):
    return "Forbidden access."

@app.errorhandler(410)
def e410(e):
    return "The content you were looking for has been deleted."

